---
title: Parallel root solving in Julia at 100x faster speed than Python
author: Leif Denby
date: 2022-08-25
---

> I have thought about blogging about my experiences with Julia for a long time,
> this will be my first attempt. Hope you find it interesting/useful! Please let
> me know below if you have any thoughts.

In this blogpost I want to demonstrate why I have fallen in love with julia:
high-speed scientific computing routines are so easily composable. Here's the problem I was trying to solve: 

In my research I use Large-Eddy Simulations (LES) to study the development of
convective clouds in the Earth's atmosphere. Because the pressure (and so
temperature) descreases with height in our atmosphere and because the
condensation releases heat and warms the atmosphere, we tend not use the
absolute temperature (as you'd measure it with a themometer) to represent the
heat content in the atmosphere, but rather we a variable which corrects for
these changes and stays more-or-less constant (i.e. is *conserved*). One such
variable is the *liquid potential temperature* ($\theta_l$) it is the *state
variable* that the [UCLA-LES](https://github.com/leifdenby/uclales) model I work
with uses:

$$
\theta_l = T \cdot \left( \frac{p_{\theta}}{p} \right)^{\frac{R_{d}}{cp_{d}}} exp \left(\frac{  - L_{v} \cdot q_l}{cp_d \cdot T} \right),
$$
where $p_\theta$, $R_d$, $cp_d$ and $L_v$ are constants (representing the
reference surface pressure, gas constant for dry air, heat capacity of dry air
at constant pressure and latent heat of vapourisation respectively) and $p$, $T$
and $q_l$ are the state variables pressure, temperature and total liquid water.

In work I am currently doing I need the absolute temperature ($T$), unfortunately
UCLA-LES doesn't store this variable in its output, but it does store
$\theta_l$, $p$ and $q_l$. So, you might think: "well this is easy, just solve
for $T$ above, put in the values for $\theta_l$, $p$ etc and you're done! Why
write a whole blog post about this?" Well, as you might have spotted the above
equation can't be solved for $T$ because $T$ is both inside and outside the
exponential (I think this is related to the [Lambert W
function](https://en.wikipedia.org/wiki/Lambert_W_function) and if you know how
I could solve this in a better way please get in touch!)

The way I decided to solve this was to cast finding `T` as a root-solving
problem, so that I define a function $f(T)$ given the known values of
$\theta_l$, $p$ and $q_l$ tries to find $T$ to satisfy:

$$f(T) = \theta_l(T,p,q_l) - \theta_l = 0$$

For a single output time in my simulation I have $2048 \times 2048 \times 200$
or just around 1 million pairs of and so I need to solve this root-finding problem
about 1 million times. And so this seems like a case for investing some time in
finding a speedy way of doing this.

I will describe below how I first solved this in Python and (years) later in
Julia and how I gained a 100x speedup in the process.

## Root finding in Python

Python has excellent routines for solving these kinds of optimization problems
in [scipy.optimize](https://docs.scipy.org/doc/scipy/reference/optimize.html#root-finding)
and the code below solves root finding problem for a single set of $\theta_l$,
$p$ and $q_l$:


```python
#using PyCall

#py"""
import numpy as np
import scipy.optimize
42

def calc_temperature(q_l, p, theta_l, T_atol=0.01):
    # constants from UCLALES
    cp_d = 1.004 * 1.0e3  # [J/kg/K]
    R_d = 287.04  # [J/kg/K]
    L_v = 2.5 * 1.0e6  # [J/kg]
    p_theta = 1.0e5  # [Pa]

    # XXX: this is *not* the *actual* liquid potential temperature (as
    # given in B. Steven's notes on moist thermodynamics), but instead
    # reflects the form used in UCLALES where in place of the mixture
    # heat-capacity the dry-air heat capacity is used
    def temp_func(T):
        return theta_l - T * (p_theta / p) ** (R_d / cp_d) * np.exp(
            -L_v * q_l / (cp_d * T)
        )

    if q_l == 0.0:
        # no need for root finding
        return theta_l / ((p_theta / p) ** (R_d / cp_d))

    # XXX: brentq solver requires bounds, I don't expect we'll get below -100C
    T_min = -100.0 + 273.0
    T_max = 50.0 + 273.0
    T = scipy.optimize.brentq(f=temp_func, a=T_min, b=T_max)

    return T

calc_temperature(1.0e-3, 1.0e5, 301.0)
```



## Root finding in Julia

```julia
using BenchmarkTools
using Roots
```


```julia
# constants from UCLALES
cp_d = 1.004 * 1.0e3  # [J/kg/K]
R_d = 287.04  # [J/kg/K]
L_v = 2.5 * 1.0e6  # [J/kg]
p_theta = 1.0e5


function calc_theta_l(T, p, q_l)
    T * (p_theta / p) ^ (R_d / cp_d) * exp(-L_v * q_l / (cp_d * T))
end
```

Let's start by creating a few reference values where we know the solution so
that we can benchmark our method later

```julia
function create_test_data(N)
    # make up some fake temperature, p, and q_l values
    q_l = 0.5e-3 .+ (rand(N) .* 1e-3)
    p = 1.0e5 .+ (rand(N) .* 1e2)
    T = 300.0 .+ 10.0 .* rand(N)
    return (T, p, q_l)
end

N_samples = 1000000
T_true, p, q_l = create_test_data(N_samples)
theta_l = calc_theta_l.(T_true, p, q_l)
```

To do the actually root-finding we will use the fantastic
[Roots.jl](https://github.com/JuliaMath/Roots.jl) (I was amazed by
`scipy.optimize`, but `Roots.jl` has even more solvers!)

```julia
function calc_T(theta_l, p, q_l; T_atol=1.0e-3)
    function root_func(T)
        theta_l - calc_theta_l(T, p, q_l)
    end

    # start with a guess with assuming no liquid water, in which case we can
    # solve for T
    T_guess = theta_l / (p_theta / p) ^ (R_d / cp_d)

    if q_l == 0
        return T_guess
    end

    find_zero(root_func, T_guess, rtol=1.0e-6, atol=T_atol)
end

@btime calc_T.(theta_l, p, q_l);
```

Two things here:

1. that was only ~7s for solving `j N_samples` root finding problems(!)
2. the "`.`"-broadcast notation is one thing I absolutely love about Julia. No need for calling `np.vectorize` or anything like that, any time in julia you want to apply a function to every element across one or more arrays you can just add a dot (`.`) - brilliant!

Now, to the next question: Solving the root-finding problem for each pair
variables in turn is all very well, but how do I make use of all the CPU cores
in my machine and do this in parallel? Enter
[Strided.jl](https://github.com/Jutho/Strided.jl). From that packages README `Strided.jl` is 

> ... for working more efficiently with strided arrays, i.e. dense arrays whose memory layout has a fixed stride along every dimension. 
> ... provides multithreaded and cache friendly implementations for mapping, reducing, broadcasting such arrays, as well as taking views, reshaping and permuting dimensions. Most of these are simply accessible by annotating a block of standard Julia code involving broadcasting and other array operations with the macro `@strided`.

And withing 10 minutes having read that I had written

```julia
using Strided
Strided.enable_threads()

T_est = similar(theta_l)
@btime @strided T_est .= calc_T.(theta_l, p, q_l);
```



Need to mention "NUM_THREADS" here

That only took 

And there is the 

    theta_l = @strided calc_theta_l.(T_true, p, q_l)
    T_est = @strided calc_T.(theta_l, p, q_l)
    T_est - T_true
